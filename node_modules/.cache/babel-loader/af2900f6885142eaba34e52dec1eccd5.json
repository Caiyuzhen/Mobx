{"ast":null,"code":"//用 Mobx 来定义计数器的方法：\n//How？\n//1.导入 makeAutoObservable 方法\n//2.定义数据状态（state）\n//3.把数据定义成响应式的处理形态\n//4.定义 Action 函数（修改数据的方法）\n//5.实例化并导出实例，给 react 使用\nimport { makeAutoObservable } from 'mobx';\n\nclass CounterStore {\n  //1.定义数据状态（state）\n  constructor() {\n    this.count = 0;\n\n    this.addCount = () => {\n      this.count++;\n    };\n\n    //2.把数据定义成响应式的处理形态\n    makeAutoObservable(this);\n  } //3.定义 Action 函数（修改数据的方法）\n\n\n} //4.实例化并导出实例，给 react 使用\n\n\nconst counterStore = new CounterStore();\nexport { counterStore };","map":{"version":3,"names":["makeAutoObservable","CounterStore","constructor","count","addCount","counterStore"],"sources":["/Users/zen/Desktop/Mobx/src/store/counter.store.js"],"sourcesContent":["\n//用 Mobx 来定义计数器的方法：\n  //How？\n      //1.导入 makeAutoObservable 方法\n      //2.定义数据状态（state）\n      //3.把数据定义成响应式的处理形态\n      //4.定义 Action 函数（修改数据的方法）\n      //5.实例化并导出实例，给 react 使用\n\n\nimport { makeAutoObservable } from 'mobx';\n\nclass CounterStore {\n\n  //1.定义数据状态（state）\n  count = 0\n\n\n  constructor() {\n    //2.把数据定义成响应式的处理形态\n    makeAutoObservable(this)\n  }\n  \n\n  //3.定义 Action 函数（修改数据的方法）\n  addCount = () => {\n    this.count++\n  }\n}\n\n\n//4.实例化并导出实例，给 react 使用\nconst counterStore = new CounterStore()\nexport {counterStore}"],"mappings":"AACA;AACE;AACI;AACA;AACA;AACA;AACA;AAGN,SAASA,kBAAT,QAAmC,MAAnC;;AAEA,MAAMC,YAAN,CAAmB;EAEjB;EAIAC,WAAW,GAAG;IAAA,KAHdC,KAGc,GAHN,CAGM;;IAAA,KAOdC,QAPc,GAOH,MAAM;MACf,KAAKD,KAAL;IACD,CATa;;IACZ;IACAH,kBAAkB,CAAC,IAAD,CAAlB;EACD,CATgB,CAYjB;;;AAZiB,C,CAmBnB;;;AACA,MAAMK,YAAY,GAAG,IAAIJ,YAAJ,EAArB;AACA,SAAQI,YAAR"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/Mobx/src/App.js\";\n//如何在 react 里边使用 store？\n//🍎修改计数器\n//🍎1.导入对应的 store 实例、mobx 中间件\n//🍎2.渲染 store 中的数据\n//🍎3.通过事件修改 store 中的实例\n//🍎4.包裹 APP，让组件视图响应式数据变化(🚀很重要，是用来连接 react 跟 mobx 的中间件)\n//🍊计算属性\n//🍊1.导入对应的 store 实例、mobx 中间件\n//🍊2.渲染 store 中的数据\n//🍊3.通过事件修改 store 中的实例\n//🍊4.在 maleAutoObservable 方法中标记\n//🍐调用 Mobx 模块化的返回值\n//——————————————————————————————————————————————————————————————————————————\n//🍎🍊1.导入 store 实例, counterStore 是个对象，里边有方法有属性\nimport { counterStore } from './store/counter.store';\nimport { counterAttr } from './store/counterAttr.store';\nimport { observer } from 'mobx-react-lite'; //中间件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"APP\",\n    children: [counterStore.count, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: counterStore.addCount,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), counterAttr.filterList(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: counterAttr.addList,\n      children: \"\\u4FEE\\u6539\\u6570\\u7EC4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n} //🍎4.包裹 APP，让组件视图响应式数据变化(🚀很重要，是用来连接 react 跟 mobx 的中间件)\n\n\n_c = App;\nexport default _c2 = observer(App);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["counterStore","counterAttr","observer","App","count","addCount","filterList","addList"],"sources":["/Users/zen/Desktop/Mobx/src/App.js"],"sourcesContent":["\n//如何在 react 里边使用 store？\n\n  //🍎修改计数器\n      //🍎1.导入对应的 store 实例、mobx 中间件\n      //🍎2.渲染 store 中的数据\n      //🍎3.通过事件修改 store 中的实例\n      //🍎4.包裹 APP，让组件视图响应式数据变化(🚀很重要，是用来连接 react 跟 mobx 的中间件)\n\n\n  //🍊计算属性\n      //🍊1.导入对应的 store 实例、mobx 中间件\n      //🍊2.渲染 store 中的数据\n      //🍊3.通过事件修改 store 中的实例\n      //🍊4.在 maleAutoObservable 方法中标记\n\n\n\n  //🍐调用 Mobx 模块化的返回值\n    \n  \n      \n//——————————————————————————————————————————————————————————————————————————\n\n\n\n//🍎🍊1.导入 store 实例, counterStore 是个对象，里边有方法有属性\nimport { counterStore } from './store/counter.store'\nimport { counterAttr } from './store/counterAttr.store'\nimport { observer } from 'mobx-react-lite'//中间件\n\n\nfunction App() {\n  return (\n    <div className=\"APP\">\n\n        {/* 🍎2.渲染 store 中的数据 */}\n        { counterStore.count }\n\n  \n        {/* 🍎3.修改 store 中的实例 */}\n        <button onClick={counterStore.addCount}>+</button>\n\n        <hr />\n\n\n        {/* 🍊2.渲染 store 中的数据(注意，在 react 内，数组不能直接被渲染，要做个拼接) */}\n        { counterAttr.filterList() }\n\n        {/* 🍊3.通过事件修改 store 中的实例 */}\n      <button onClick={ counterAttr.addList }>修改数组</button>\n\n    </div>\n  )\n}\n\n//🍎4.包裹 APP，让组件视图响应式数据变化(🚀很重要，是用来连接 react 跟 mobx 的中间件)\nexport default observer(App);\n"],"mappings":";AACA;AAEE;AACI;AACA;AACA;AACA;AAGJ;AACI;AACA;AACA;AACA;AAIJ;AAIF;AAIA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CAA0C;;;;AAG1C,SAASC,GAAT,GAAe;EACb,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,WAGMH,YAAY,CAACI,KAHnB,eAOI;MAAQ,OAAO,EAAEJ,YAAY,CAACK,QAA9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPJ,eASI;MAAA;MAAA;MAAA;IAAA,QATJ,EAaMJ,WAAW,CAACK,UAAZ,EAbN,eAgBE;MAAQ,OAAO,EAAGL,WAAW,CAACM,OAA9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAhBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,C,CAED;;;KAxBSJ,G;AAyBT,qBAAeD,QAAQ,CAACC,GAAD,CAAvB"},"metadata":{},"sourceType":"module"}
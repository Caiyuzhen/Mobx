{"ast":null,"code":"var _s = $RefreshSig$();\n\n//🚀Mobx 模块化 (固定的封装模式，一样的写法)\n//How?\n//1.拆分成多个 store ，每个模块定义自己独立的 state 跟 action 方法\n//2.导入 store 子模块\n//3.声明一个 rootStore 类\n//4.在 constructor() 初始化中，对子模块的数据进行【实例化】\n//5.实例化 rootStore \n//6.使用 React 的 useContext 机制来【封装 rootStore】 方法，供业务组件统一使用\n//🍥6-1.导入 React 方法\n//🍥6-2.把实例化的 rootStore 对象传入 createContext() 内, 当作它的默认属性！🔥\n//🍥6-3.通过 useContext() 来获取 createContext() 那边传过来的对象\n//🍥6-4.导出 useStoreResult\n//——————————————————————————————————————————————————————————————\n//2.导入 store 子模块\nimport { ListStore } from './list.store'; //🍥6-1.导入 React 方法\n\nimport React from 'react'; //2.声明一个 rootStore 类(里边可以放置多个子模块的实例)\n\nclass RootStore {\n  //初始化\n  constructor() {\n    //3.在 constructor() 初始化中，对子模块的数据进行【实例化】\n    this.ListStore = new ListStore();\n  }\n\n} //5.实例化 rootStore \n\n\nconst rootStore = new RootStore(); //🍥6-2.把实例化的 rootStore 对象传入 createContext() 内, 当作它的默认属性！🔥\n\nconst context = /*#__PURE__*/React.createContext(rootStore); //🍥6-3.通过 useContext() 来获取 createContext() 那边传过来的对象\n\nconst useStoreResult = () => {\n  _s();\n\n  return React.useContext(context);\n}; //所以调用 useStoreResult 就能或获得 rootStore 对象返回的值\n//🍥6-4.导出 results\n\n\n_s(useStoreResult, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { useStoreResult };","map":{"version":3,"names":["ListStore","React","RootStore","constructor","rootStore","context","createContext","useStoreResult","useContext"],"sources":["/Users/zen/Desktop/Mobx/src/store/index.js"],"sourcesContent":["//🚀Mobx 模块化 (固定的封装模式，一样的写法)\n\n    //How?\n        //1.拆分成多个 store ，每个模块定义自己独立的 state 跟 action 方法\n        //2.导入 store 子模块\n        //3.声明一个 rootStore 类\n        //4.在 constructor() 初始化中，对子模块的数据进行【实例化】\n        //5.实例化 rootStore \n        //6.使用 React 的 useContext 机制来【封装 rootStore】 方法，供业务组件统一使用\n              //🍥6-1.导入 React 方法\n              //🍥6-2.把实例化的 rootStore 对象传入 createContext() 内, 当作它的默认属性！🔥\n              //🍥6-3.通过 useContext() 来获取 createContext() 那边传过来的对象\n              //🍥6-4.导出 useStoreResult\n\n              \n//——————————————————————————————————————————————————————————————\n\n\n//2.导入 store 子模块\nimport { ListStore } from './list.store'\n\n//🍥6-1.导入 React 方法\nimport React from 'react'\n\n\n\n      \n\n//2.声明一个 rootStore 类(里边可以放置多个子模块的实例)\nclass RootStore {\n\n  //初始化\n  constructor() {\n    //3.在 constructor() 初始化中，对子模块的数据进行【实例化】\n    this.ListStore = new ListStore()\n  }\n}\n\n\n\n\n\n//5.实例化 rootStore \nconst rootStore = new RootStore()\n\n//🍥6-2.把实例化的 rootStore 对象传入 createContext() 内, 当作它的默认属性！🔥\nconst context = React.createContext(rootStore)\n\n//🍥6-3.通过 useContext() 来获取 createContext() 那边传过来的对象\nconst useStoreResult = () => React.useContext(context) //所以调用 useStoreResult 就能或获得 rootStore 对象返回的值\n\n//🍥6-4.导出 results\nexport { useStoreResult }"],"mappings":";;AAAA;AAEI;AACI;AACA;AACA;AACA;AACA;AACA;AACM;AACA;AACA;AACA;AAGd;AAGA;AACA,SAASA,SAAT,QAA0B,cAA1B,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAMA;;AACA,MAAMC,SAAN,CAAgB;EAEd;EACAC,WAAW,GAAG;IACZ;IACA,KAAKH,SAAL,GAAiB,IAAIA,SAAJ,EAAjB;EACD;;AANa,C,CAahB;;;AACA,MAAMI,SAAS,GAAG,IAAIF,SAAJ,EAAlB,C,CAEA;;AACA,MAAMG,OAAO,gBAAGJ,KAAK,CAACK,aAAN,CAAoBF,SAApB,CAAhB,C,CAEA;;AACA,MAAMG,cAAc,GAAG;EAAA;;EAAA,OAAMN,KAAK,CAACO,UAAN,CAAiBH,OAAjB,CAAN;AAAA,CAAvB,C,CAAuD;AAEvD;;;GAFME,c;;AAGN,SAASA,cAAT"},"metadata":{},"sourceType":"module"}
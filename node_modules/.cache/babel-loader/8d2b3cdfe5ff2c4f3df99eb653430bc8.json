{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/Mobx/src/App.js\",\n    _s = $RefreshSig$();\n\n//如何在 react 里边使用 store？\n//🍎修改计数器\n//🍎1.导入对应的 store 实例、mobx 中间件\n//🍎2.渲染 store 中的数据\n//🍎3.通过事件修改 store 中的实例\n//🍎4.包裹 APP，让组件视图响应式数据变化(🚀很重要，是用来连接 react 跟 mobx 的中间件)\n//🍊计算属性\n//🍊1.导入对应的 store 实例、mobx 中间件\n//🍊2.渲染 store 中的数据\n//🍊3.通过事件修改 store 中的实例\n//🍐调用 Mobx 模块化的返回值\n//🍐1.导入对应的 store 实例\n//🍐2.声明变量来承载 Mobx 的返回值\n//🍐3.调用返回值内的【方法】、【数据】等\n//🍐3-1.解构赋值的写法\n//🍐3-2.直接取值、修改值的写法\n//——————————————————————————————————————————————————————————————————————————\n//🍎🍊🍐1.导入 store 实例, counterStore 是个对象，里边有方法有属性\nimport { counterStore } from './store/counter.store';\nimport { counterAttr } from './store/counterAttr.store';\nimport { observer } from 'mobx-react-lite'; //中间件\n\nimport { useStoreResult } from './store/index.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //🍐2.声明变量来承载 Mobx 的返回值(直接取值的写法)\n  const rootStore = useStoreResult(); //🍐3-1.解构赋值, 比如解构出 ListStore 的实例对象，里边包含了 ListStore 的方法和属性\n\n  const {\n    ListStore\n  } = useStoreResult();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"APP\",\n    children: [counterStore.count, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: counterStore.addCount,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), counterAttr.filterList(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: counterAttr.addList,\n      children: \"\\u4FEE\\u6539\\u6570\\u7EC4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), ListStore.list.map(item => item), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), rootStore.ListStore.list.map(item => item), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rootStore.ListStore.addList,\n      children: \"\\u6DFB\\u52A0\\u6570\\u636E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n} //🍎4.包裹 APP，让组件视图响应式数据变化(🚀很重要，是用来连接 react 跟 mobx 的中间件)\n\n\n_s(App, \"5BXqKNB/CnQvezcjWuyV7zJcHzU=\", false, function () {\n  return [useStoreResult, useStoreResult];\n});\n\n_c = App;\nexport default _c2 = observer(App);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["counterStore","counterAttr","observer","useStoreResult","App","rootStore","ListStore","count","addCount","filterList","addList","list","map","item"],"sources":["/Users/zen/Desktop/Mobx/src/App.js"],"sourcesContent":["\n//如何在 react 里边使用 store？\n\n  //🍎修改计数器\n      //🍎1.导入对应的 store 实例、mobx 中间件\n      //🍎2.渲染 store 中的数据\n      //🍎3.通过事件修改 store 中的实例\n      //🍎4.包裹 APP，让组件视图响应式数据变化(🚀很重要，是用来连接 react 跟 mobx 的中间件)\n\n\n\n  //🍊计算属性\n      //🍊1.导入对应的 store 实例、mobx 中间件\n      //🍊2.渲染 store 中的数据\n      //🍊3.通过事件修改 store 中的实例\n\n\n\n  //🍐调用 Mobx 模块化的返回值\n    //🍐1.导入对应的 store 实例\n    //🍐2.声明变量来承载 Mobx 的返回值\n    //🍐3.调用返回值内的【方法】、【数据】等\n        //🍐3-1.解构赋值的写法\n        //🍐3-2.直接取值、修改值的写法\n\n\n\n//——————————————————————————————————————————————————————————————————————————\n\n\n\n//🍎🍊🍐1.导入 store 实例, counterStore 是个对象，里边有方法有属性\nimport { counterStore } from './store/counter.store'\nimport { counterAttr } from './store/counterAttr.store'\nimport { observer } from 'mobx-react-lite'//中间件\nimport { useStoreResult } from './store/index.js'\n\nfunction App() {\n\n  //🍐2.声明变量来承载 Mobx 的返回值(直接取值的写法)\n  const rootStore = useStoreResult()\n\n  //🍐3-1.解构赋值, 比如解构出 ListStore 的实例对象，里边包含了 ListStore 的方法和属性\n  const { ListStore } = useStoreResult()\n\n  return (\n    <div className=\"APP\">\n\n        {/* 🍎2.渲染 store 中的数据 */}\n        { counterStore.count }\n        {/* 🍎3.修改 store 中的实例 */}\n        <button onClick={counterStore.addCount}>+</button>\n\n\n        <hr />\n\n        {/* 🍊2.渲染 store 中的数据(注意，在 react 内，数组不能直接被渲染，要做个拼接) */}\n        { counterAttr.filterList() }\n        {/* 🍊3.通过事件修改 store 中的实例 */}\n        <button onClick={ counterAttr.addList }>修改数组</button>\n\n\n\n        <hr />\n        {/* 🍐3-1.解构赋值的渲染方法 */}\n        { ListStore.list.map(item => item ) }\n\n     \n        <hr />\n        {/* //🍐3-2.直接取值、修改值的写法 */}\n        { rootStore.ListStore.list.map(item => item ) }\n        <button onClick={ rootStore.ListStore.addList }>添加数据</button>\n  \n\n    </div>\n  )\n}\n\n//🍎4.包裹 APP，让组件视图响应式数据变化(🚀很重要，是用来连接 react 跟 mobx 的中间件)\nexport default observer(App);\n"],"mappings":";;;AACA;AAEE;AACI;AACA;AACA;AACA;AAIJ;AACI;AACA;AACA;AAIJ;AACE;AACA;AACA;AACI;AACA;AAIR;AAIA;AACA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CAA0C;;AAC1C,SAASC,cAAT,QAA+B,kBAA/B;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEb;EACA,MAAMC,SAAS,GAAGF,cAAc,EAAhC,CAHa,CAKb;;EACA,MAAM;IAAEG;EAAF,IAAgBH,cAAc,EAApC;EAEA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,WAGMH,YAAY,CAACO,KAHnB,eAKI;MAAQ,OAAO,EAAEP,YAAY,CAACQ,QAA9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ,eAQI;MAAA;MAAA;MAAA;IAAA,QARJ,EAWMP,WAAW,CAACQ,UAAZ,EAXN,eAaI;MAAQ,OAAO,EAAGR,WAAW,CAACS,OAA9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAbJ,eAiBI;MAAA;MAAA;MAAA;IAAA,QAjBJ,EAmBMJ,SAAS,CAACK,IAAV,CAAeC,GAAf,CAAmBC,IAAI,IAAIA,IAA3B,CAnBN,eAsBI;MAAA;MAAA;MAAA;IAAA,QAtBJ,EAwBMR,SAAS,CAACC,SAAV,CAAoBK,IAApB,CAAyBC,GAAzB,CAA6BC,IAAI,IAAIA,IAArC,CAxBN,eAyBI;MAAQ,OAAO,EAAGR,SAAS,CAACC,SAAV,CAAoBI,OAAtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAzBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD,C,CAED;;;GAzCSN,G;UAGWD,c,EAGIA,c;;;KANfC,G;AA0CT,qBAAeF,QAAQ,CAACE,GAAD,CAAvB"},"metadata":{},"sourceType":"module"}